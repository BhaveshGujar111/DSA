// You can edit this code!
// Click here and start typing.
package main

import "fmt"

type Edge struct{
    node int
    wt int
}

func dfs(node int, adj [][]Edge, visited []bool) {
    visited[node] = true
    for _, edge := range adj[node] {
        if !visited[edge.node] {
            dfs(edge.node, adj, visited)
        }
    }
    
}

func main() {
    // Adjacency List
    var n, m int
 	fmt.Scan(&n, &m)
 	adj := make([][]Edge, n)
 	for i := 0; i < m; i++ {
 	    var u,v,wt int
 	    fmt.Scan(&u, &v, &wt)
 	    adj[u] = append(adj[u], Edge{node: v, wt: wt})
 	    adj[v] = append(adj[v], Edge{node: u, wt: wt})
 	}
    visited := make([]bool, n)
    connectedComponent := 0
    for i := 0; i < n ; i++ {
        if !visited[i] {
            connectedComponent++
            dfs(i, adj, visited)
        }
    }
    fmt.Printf("Connected Components: %d", connectedComponent)
 	
}
